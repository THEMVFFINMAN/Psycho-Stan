<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>EDIT THE CODE</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This variable (Below) is how many pixels far his vision of sight to the LEFT is
Left_Sight=   64;
//This variable (Below) is how many pixels far his vision of sight to the RIGHT is
Right_Sight=  64;
//This variable (Below) is how many pixels far his vision of sight ABOVE is
Above_Sight=  16;
//This variable (Below) is how many pixels far his vision of sight BELOW is
Below_Sight=  100;

//This variable (Below) is how much damage the enemy will do to the player.
strength=50;

//THESE ARE THE ENEMEIES SPRITES. CHANGE THIS IF YOU'VE MADE DIFFERENT SPRITES FOR THIS ENEMY
right_walk=spr_e_right2     ;
right_die=spr_e_right_dying2;
right_idle=spr_e_right_idle2;
right_up=spr_e_right_up2  ;
right_down=spr_e_right_down2;

left_walk=spr_e_left2      ;
left_die=spr_e_left_dying2 ;
left_idle=spr_e_left_idle2 ;
left_up=spr_e_left_up2  ;
left_down=spr_e_left_down2;








//This variable (Below) is how long it will take the enemy to give up on chasing the player when the player is out of his sight.
forget_him_time=10;

//This variable (Below) is how long it will take the enemy (at least) before his next jump.
before_next_jump_set=20;
before_next_jump=before_next_jump_set;





//TRY NOT TO CHANGE ANYTHING ON THE LINE BELOW
forget_him=0;jump=false;found_him=false;right="Right";left="Left";nowhere="Nowhere";up="Up";down="Down";going=nowhere;continuesprite=-1;freespace="Free space";liquid="Liquid";in=freespace;inwater=false;speedxmax_plus=0;



//This variable (Below) is the direction the enemy faces at first.
facing=left;

//This variable (Below) is the enemys current speed.
speedx=0;

//This variable (Below) decides the max amount of pixels the enemy can possibly move (on ground) per step.
//WARNING: TRY NOT GIVE THIS VARIABLE A VALUE HIGHER THAN THE ENEMIES BOUNDING BOX WIDTH.
speedxmax=4;

//This variable (Below) decides how long it will take for the enemy to return to a speed of 0.
slip=8;

//This variable (Below) decides how long the enemy will take to reach his max speed when moving.
startup=20;

//This variable (Below) decides how strong the gravity is for the enemy.
grav=0.6;

//This variable (Below) will tell you which way the enemy is trying to move. 
//If the value is 1, he's trying to move right, if it's 2, he's trying to move left.
move=choose(1,2);

//This variable (Below) will tell you whether the enemy is on the ground or not.
onground=false;

//This variable (Below) is how fast the enemy can possibly fall
vspeedmax=12;
//This variable (Below) is the enemys jumping speed.
jumpspeed=9;




//                                                                               \\
//**** THESE VARIABLES (Below) ARE FOR WHEN THE ENEMY ENTERS AND EXITS WATER ****\\

//This variable (Below) is how much the enemys MAX SPEED will be temporarily divided by when you enter water.
    speeddivide=2;
//This variable (Below) is how much the enemys VSPEED will be divided by when you enter water.
    vspeeddivide=2;
//This variable (Below) is how much the enemys VSPEED will be multiplied by when you exit water.
    hopout=1.2;
//This variable (Below) is how much the enemys GRAVITY will be temporarily divided by when you enter water.
    gravdivide=2; 
//This variable (Below) is how much the enemys JUMP SPEED will be temporarily divided by when you enter water.
    jumpspeeddivide=1.7; 
//This variable (Below) is how much the enemys MAX VSPEED will be temporarily divided by when you enter water.
    maxvspeeddivide=10;





//                                                \\
//**** THESE VARIABLES (Below) ARE FOR HEALTH ****\\

//This variable (Below) is the highest your HP will ever get.
hpmax=10;

//This variable (Below) is your current health.
hp=hpmax;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Increasing Player EXP</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_player.expcurrent+=66;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SYSTEM</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_free(x,y+1)) {gravity=grav;}
else {gravity=0;}
if (vspeed&gt;vspeedmax) {vspeed=vspeedmax;}
if (hp&gt;0)
{
if (move==1) {speedx+=((speedxmax+speedxmax_plus)-speedx)/startup}
else if (move==2) {speedx+=(-(speedxmax+speedxmax_plus)-speedx)/startup}
else if (move==0&amp;&amp;speedx!=0) {speedx+=-(speedx/slip)}
if (speedx&gt;-0.3&amp;&amp;speedx&lt;0.3&amp;&amp;move=0) {speedx=0;}
if speedx&gt;(speedxmax+speedxmax_plus) {speedx=(speedxmax+speedxmax_plus);}
else if speedx&lt;-(speedxmax+speedxmax_plus) {speedx=-(speedxmax+speedxmax_plus);}
if (place_meeting(x,y,water)&amp;&amp;inwater==false) 
{in=liquid; inwater=true; 
speedxmax/=speeddivide; 
vspeed/=vspeeddivide; 
grav/=gravdivide; 
jumpspeed/=jumpspeeddivide; 
vspeedmax/=maxvspeeddivide;
instance_create(x+speedx,y,obj_splash);}
else if (!place_meeting(x,y,water)&amp;&amp;inwater==true) 
{in=freespace; inwater=false; 
speedxmax*=speeddivide; 
vspeed*=hopout; 
grav*=gravdivide 
jumpspeed*=jumpspeeddivide; 
vspeedmax*=maxvspeeddivide;}
if (speedx&gt;0) {facing=right;}
if (speedx&lt;0) {facing=left;}
if (!place_free(x,y+1)) {onground=true;}else {onground=false;}
if (vspeed&gt;0) {going=down;}
else if (vspeed&lt;0) {going=up;}else {going=nowhere;}
if before_next_jump&gt;0 {before_next_jump-=1;}
if (jump=true&amp;&amp;before_next_jump=0)
{jump=false;
before_next_jump=before_next_jump_set+floor(random(20));
if (!place_free(x,y+1)&amp;&amp;place_free(x,y-1))||(inwater) 
{vspeed=-jumpspeed;}}

//SPRITE CHANGING : when you're not moving, and you're on the ground
if (speedx==0&amp;&amp;onground&amp;&amp;move=0) 
{if (facing==right) {sprite_index=right_idle;    image_speed=0.25;}
else if (facing==left) {sprite_index=left_idle; image_speed=0.25;}}

//SPRITE CHANGING : when you're moving, and you're on the ground
if (speedx!=0&amp;&amp;onground) 
{if (facing==right)     {sprite_index=right_walk; image_speed=0.5;}
else if (facing==left) {sprite_index=left_walk;  image_speed=0.5;}
}

//SPRITE CHANGING : when you're on the ground
if (!onground) 
{if      (facing==right&amp;&amp;going==up)   {sprite_index=right_up;   image_speed=0;}
else if  (facing==right&amp;&amp;going==down) {sprite_index=right_down; image_speed=0;}
if       (facing==left&amp;&amp;going==up)    {sprite_index=left_up;    image_speed=0;}
else if  (facing==left&amp;&amp;going==down)  {sprite_index=left_down;  image_speed=0;}}

if 
(collision_rectangle(x-Left_Sight,y-Above_Sight,x+Right_Sight,y+Below_Sight,obj_player,false,true)
&amp;&amp;!collision_line(obj_player.x,obj_player.y,x,y,obj_floor,true,true))
{
found_him=true;
forget_him=forget_him_time;
}
else
{
if forget_him&gt;0 {forget_him-=1;}
if forget_him=0 {found_him=false}
}}

// Limiting the HP
if hp&gt;hpmax {hp=hpmax;}
if hp&lt;0 {hp=0;}

if (hp==0)
{
if (facing==right&amp;&amp;sprite_index!=right_die) {sprite_index=right_die; image_index=0; image_speed=0.5;}
if (facing==left&amp;&amp;sprite_index!=left_die)  {sprite_index=left_die; image_index=0; image_speed=0.5;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AI</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&gt;0)
{
if (found_him==true)
{
if      (obj_player.x&gt;x) {move=1;}
else if (obj_player.x&lt;x) {move=2;}
speedxmax_plus=2;
// You can add more here. These are all of his activities when he has found the player.
}


else if (found_him==false)
{
move=0;
speedxmax_plus=0;
// You can add more here. These are all of his activities when he can't find the player.
}



// The actual movement \\
if (place_free(x+speedx,y)) {x+=speedx;}
else 
{
if (speedx&gt;0) {move_contact_solid(0  , speedx); speedx=0;}
if (speedx&lt;0) {move_contact_solid(180,-speedx); speedx=0;}
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Rounding out the y position in an attempt to remove any possible y-pixel offset.
y=round(y)
//Moving to the nearest solid contact
move_contact_solid(direction,abs(vspeedmax)+1);
//Resetting the vspeed to 0
vspeed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index==right_die) {instance_destroy(); image_speed=0; image_index=image_number-1;}
if (sprite_index==left_die ) {instance_destroy(); image_speed=0; image_index=image_number-1;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,floor(image_index),x,y);
draw_set_font(enemy_hp);
draw_set_halign(true);
draw_text(x,y-32,"HP: "+string(hp));
draw_set_halign(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
