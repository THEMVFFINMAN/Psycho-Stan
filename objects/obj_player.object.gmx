<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_right_still</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_collision_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main editables

//TRY NOT TO CHANGE ANYTHING ON LINE 2 (Below)
came_from="";cantbehit=false;trans86E=false;dead=false;current_room=room;visibl=false;hit=false;right="Right";left="Left";nowhere="Nowhere";up="Up";down="Down";going=nowhere;continuesprite=-1;keysright=false;keysleft=false;freespace="Free space";liquid="Liquid";in=freespace;inwater=false;hitshock=false;going_to_prev_room=false;going_to_next_room=false;
transition_kind = 19;
myfloor="second";

moreknife = false;

vix = 0;
viy = 0;
yvar = 5;

//This is just to set the default image speed. The actual image speeds get changed as the sprites change
image_speed=0.167;

//This variable (Below) is the direction you face at first.
facing=left;

//This variable (Below) is your current speed.
speedx=0;

//This variable (Below) decides the max amount of pixels you can possibly move (on ground) per step.
//WARNING: TRY NOT GIVE THIS VARIABLE A VALUE HIGHER THAN THE PLAYERS BOUNDING BOX WIDTH.
speedxmax=2;

//This variable (Below) decides how long you will take to return to a speed of 0 when not holding any keys.
slip=20;
//This variable (Below) decides how long you will take to reach your max speed when moving.
startup=12;

//This variable (Below) decides how strong the gravity is.
grav=0.2;

//This variable (Below) will tell you which way the player is trying to move. 
//If the value is 1, he's trying to move right, if it's 2, he's trying to move left.
move=0;

//Change these keys (Below) to change your in game controls
keyleft=vk_left;
keyright=vk_right;
keyup=vk_up;
keydown=vk_down;
killkey=ord('E');

//This variable (Below) will tell you whether you're on the ground or not.
onground=false;

//This variable (Below) is how fast you can possibly fall
vspeedmax=12;
//This variable (Below) is your jumping speed.
jumpspeed=2;
//This variable (Below) is the players initial score
playerscore=0;

invins_max=90;
invins=0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EXP and HP                                                
//**** THESE VARIABLES (Below) ARE FOR HEALTH ****\\

//This variable (Below) is the highest your HP will ever get.
hpmax=100;

//This variable (Below) is your current health.
hp=hpmax;

//This variable (Below) is how many pixels wide your health will be at max.
hpscale=150;

//                                                    \\
//**** THESE VARIABLES (Below) ARE FOR EXPERIENCE ****\\

//This variable (Below) is the amount of exp you need to reach before a level up (for the first level up)\\
expmax=100;

//This variable (Below) is your current exp.
expcurrent=0;

//This variable (Below) is how many pixels wide your exp will be at max.
expscale=150;

level=1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CAMERA
instance_create(x, y, CAMERA);
view_object = CAMERA;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Code

if (sprite_index != spr_sitting &amp;&amp; sprite_index != spr_pooping &amp;&amp; sprite_index != spr_pooping2)
{
//Gravity and limiting the vspeed\\
if (place_free(x,y+1)) {gravity=grav;}
else {gravity=0;}
if (vspeed&gt;vspeedmax) {vspeed=vspeedmax;}

if (keyboard_check_direct(vk_shift))
    shift = true;
else
    shift = false;
    



//Important keyboard checks to keep the movements smooth.\\
if ( keyboard_check_direct(keyright)|| keyboard_check_direct(ord('D'))&amp;&amp;keysright==false) {move=1; keysright=true;}
if ( keyboard_check_direct(keyleft )|| keyboard_check_direct(ord('A'))&amp;&amp;keysleft==false)  {move=2; keysleft=true}
if ( keyboard_check_direct(keyright)|| keyboard_check_direct(ord('D'))&amp;&amp;!keyboard_check_direct(keyleft )&amp;&amp;!keyboard_check_direct(ord('A'))) {move=1;}
if ( keyboard_check_direct(keyleft )|| keyboard_check_direct(ord('A'))&amp;&amp;!keyboard_check_direct(keyright)&amp;&amp;!keyboard_check_direct(ord('D'))) {move=2;}
if (!keyboard_check_direct(keyright)&amp;&amp;!keyboard_check_direct(ord('D'))&amp;&amp;keysright==true) {move=0; keysright=false;}
if (!keyboard_check_direct(keyleft )&amp;&amp;!keyboard_check_direct(ord('A'))&amp;&amp;keysleft==true)  {move=0; keysleft=false;}
if (!keyboard_check_direct(keyleft )&amp;&amp;!keyboard_check_direct(ord('A'))&amp;&amp;keysleft==true)  {move=0; keysleft=false;}




// Changing the speedx \\
if (!hit)
{if (move==1)            {speedx+=(speedxmax-speedx)/startup}
else if (move==2)       {speedx+=(-speedxmax-speedx)/startup}
if (trans86E=false)
{if (move==0&amp;&amp;speedx!=0) {speedx+=-(speedx/slip)}}
if (speedx&gt;-1&amp;&amp;speedx&lt;1&amp;&amp;move=0) {speedx=0;}}
if speedx&gt;speedxmax {speedx=speedxmax;}
else if speedx&lt;-speedxmax {speedx=-speedxmax;}

// Jumping \\
if (keyboard_check_pressed(keyup)||keyboard_check_pressed(ord('W'))) 
{
    if (!place_free(x,y+1)&amp;&amp;place_free(x,y-1))
    {
        vspeed=-jumpspeed;
        vspeed = round(vspeed);
    }
}

if ((keyboard_check_released(keyup)||keyboard_check_released(ord('W')))&amp;&amp;going==up) {vspeed = round(vspeed /2);}

//vspeed = round(vspeed)

// Updating direction variables \\
if (speedx&gt;0&amp;&amp;continuesprite=-1&amp;&amp;!hitshock) {facing=right;}
if (speedx&lt;0&amp;&amp;continuesprite=-1&amp;&amp;!hitshock) {facing=left;}
if (!place_free(x,y+1)) {onground=true;}
else {onground=false;}
if (vspeed&gt;0) {going=down;}
else if (vspeed&lt;0) {going=up;}
else {going=nowhere;}

//*******************************************************************\\
//***********************SPRITE CHANGING BELOW***********************\\
//*******************************************************************\\


// Sprite changes for when you're NOT in the air and NOT moving \\
if (speedx==0&amp;&amp;onground&amp;&amp;move=0&amp;&amp;!hitshock) 
{
if (facing==right) {sprite_index=spr_right_still;    image_speed=0.25;}
else if (facing==left) {sprite_index=spr_left_still; image_speed=0.25;}
}



// Sprite changes for when you're NOT in the air and moving \\
if (speedx!=0&amp;&amp;onground&amp;&amp;!hitshock) 
{
if (facing==right)
{
    if (shift)
        sprite_index=spr_right;
    else
        sprite_index=spr_walkright; 
        
    image_speed=0.1;
}
else if (facing==left)
{
    if (shift)
        sprite_index=spr_left;
    else
        sprite_index=spr_walkleft;  
    
    image_speed=0.1;
}
if (facing==right&amp;&amp;move==2&amp;&amp;continuesprite==-1&amp;&amp;abs(speedx)&gt;speedxmax/1.8) 
{sprite_index=spr_right_toleft; image_speed=0.5; facing=left ; continuesprite=sprite_index; image_index=0;}
else if (facing==left&amp;&amp;move==1&amp;&amp;continuesprite==-1&amp;&amp;abs(speedx)&gt;speedxmax/1.8)  
{sprite_index=spr_left_toright; image_speed=0.5; facing=right; continuesprite=sprite_index; image_index=0;}
}

// Sprite changes for when you're in the air \\
if (!onground&amp;&amp;!inwater&amp;&amp;!hitshock) 
{
if      (facing==right&amp;&amp;going==up)   {sprite_index=spr_right_up;   image_speed=0;}
else if (facing==right&amp;&amp;going==down) {sprite_index=spr_right_down; image_speed=0;}
if      (facing==left&amp;&amp;going==up)    {sprite_index=spr_left_up;    image_speed=0;}
else if (facing==left&amp;&amp;going==down)  {sprite_index=spr_left_down;  image_speed=0;}
}

//*******************************************************************\\
//***********************SPRITE CHANGING ABOVE***********************\\
//*******************************************************************\\



//Quit the turning animation if some things don't fit\\
if (!onground) {continuesprite=-1;}
else if (facing==right&amp;&amp;move==2) {continuesprite=-1;}
else if (facing==left&amp;&amp;move==1) {continuesprite=-1;}
if (continuesprite&gt;-1) 
{sprite_index=continuesprite; image_speed=0.5; speedx = 0;
if (facing==left) {if speedx&lt;0 {speedx=0;}} 
if (facing==right) {if speedx&gt;0 {speedx=0;}}}
if (speedx &gt; 0 &amp;&amp; keysright)
    if (shift)
        speedx = 2;
    else
        speedx = 1;
else if(speedx &lt;= 0 &amp;&amp; keysleft)
    if (shift)
        speedx = -2;
    else
        speedx = -1;
        
if (sprite_index == spr_right_toleft)
    speedx = 0;
        
if (!(sprite_index == spr_left || sprite_index == spr_walkleft || sprite_index == spr_right || sprite_index == spr_walkright || sprite_index == spr_right_up || sprite_index == spr_right_down || sprite_index == spr_left_up || sprite_index == spr_left_down))
    speedx = 0;
// The actual movement \\
if (place_free(x+speedx,y)) {x+=round(speedx);}
else 
{
if (trans86E=false)
{
if (speedx&gt;0) {move_contact_solid(0  , speedx); speedx=0;}
if (speedx&lt;0) {move_contact_solid(180,-speedx); speedx=0;}
}
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill/Knife

if (instance_exists(obj_carryknife))
{
    obj_carryknife.y = obj_player.y+4;
    obj_carryknife.x = obj_player.x+17;

        if (sprite_index == spr_pooping || sprite_index == spr_pooping2)
        {
            obj_carryknife.depth = 201;
        }
        else
            obj_carryknife.depth = -501;
}


/*
if (instance_exists(obj_knife) &amp;&amp; distance_to_object(obj_knife) &lt; 4)
{
    if (keyboard_check_pressed(killkey))
    {
        keyboard_clear(killkey);
        hasknife = true;
        with (obj_knife) instance_destroy();
        
        instance_create(obj_player.x + 17, obj_player.y + 4, obj_carryknife);
    }
}

if (instance_exists(obj_carryknife))
{
        if (keyboard_check_pressed(killkey) &amp;&amp; instance_exists(obj_victim) &amp;&amp; distance_to_point(obj_victim.x - 2, obj_victim.y) &lt; 4 &amp;&amp; !moreknife)
        {
            keyboard_clear(killkey);
            instance_create(obj_victim.x-1, obj_victim.y, obj_victim_dead);
            with(obj_victim){instance_destroy();}
            with(obj_carryknife){instance_destroy();}
            
            vix = obj_victim.x - 1;
            viy = obj_victim.y;
        }
        
        if (keyboard_check_pressed(killkey) &amp;&amp; instance_exists(obj_victim_dead_clean) &amp;&amp; distance_to_point(obj_victim_dead_clean.x + 14, obj_victim_dead_clean.y + 10) &lt; 4 &amp;&amp; !moreknife &amp;&amp; obj_carryknife.image_index == 0)
        {
            keyboard_clear(killkey);
            obj_victim_dead_clean.image_index = 1;
            with(obj_carryknife){instance_destroy();}
        }
        
        if (sprite_index == spr_pooping)
        {
            obj_carryknife.depth = 201;
        }
        else
            obj_carryknife.depth = -501;
}

if (instance_exists(obj_victim_dead_clean) &amp;&amp; instance_exists(obj_carryknife) &amp;&amp; keyboard_check_pressed(killkey))
if( obj_victim_dead_clean.image_index = 0 &amp;&amp; distance_to_point(obj_victim_dead_clean.x + 14, obj_victim_dead_clean.y + 10) &lt; 6 )
{
    {
        keyboard_clear(killkey);
        obj_victim_dead_clean.image_index = 1;
        with(obj_carryknife){instance_destroy();}
    }
}

if (instance_exists(obj_victim_dead_clean)) 
{
    if (keyboard_check_pressed(killkey) &amp;&amp; obj_victim_dead_clean.image_index = 1 &amp;&amp; distance_to_point(obj_victim_dead_clean.x + 14, obj_victim_dead_clean.y + 10) &lt; 6)
    {
        keyboard_clear(killkey);
        obj_victim_dead_clean.image_index = 0;
        instance_create(obj_player.x + !(facing = right) + 17, obj_player.y + 4, obj_carryknife); 
        obj_carryknife.image_index = 1;
    }
}

if (instance_exists(obj_carryknife))
{
    obj_carryknife.y = obj_player.y+4;
    obj_carryknife.x = obj_player.x+17;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_doorg">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  // DOOR

if ( keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord('W')))
{
    if (room == Room_1)
    {
        transition_kind = 20;
        room_goto(Room_2);
        //CAMERA.y += 11;
        //x = obj_girlbath.x;
        //y = obj_girlbath.y;
    }
    
    if (room == Room_2)
    {
        transition_kind = 21;
        room_goto(Room_1);
        //CAMERA.y += 11;
        //x = obj_girlmain.x;
        //y = obj_girlmain.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_doorb">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  // DOOR

if ( keyboard_check_pressed(keyup) || keyboard_check_pressed(ord('W')))
{
    if (room == Room_1)
    {
        transition_kind = 15;
        room_goto(Room_2);
        //CAMERA.y -= 44;
        //x = obj_girlbath.x;
        //y = obj_girlbath.y;
    }
    
    if (room == Room_2)
    {
        transition_kind = 19;
        room_goto(Room_1);
        //CAMERA.y -= 44;
        //x = obj_girlmain.x;
        //y = obj_girlmain.y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Rounding out the y position in an attempt to remove any possible y-pixel offset.
y=round(y)
//Moving to the nearest solid contact
move_contact_solid(direction,abs(vspeedmax)+1);
//Resetting the vspeed to 0
vspeed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="DOWN">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(keydown)) 
{
    obj_player.y += 110;
    
    myfloor = "first";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="UP">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(keyup)) 
{ 
    obj_player.y -= 110;    
    myfloor = "second";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is all just for proper sprite changing.
if (sprite_index==continuesprite) {continuesprite=-1; image_index=image_number-1; speedx=0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (visible==true) {draw_sprite(sprite_index,floor(image_index),x,y);}

draw_text(x - 30,y - 50, transition_kind);
//draw_text(x - 15,y - 20, obj_girlmain.y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
